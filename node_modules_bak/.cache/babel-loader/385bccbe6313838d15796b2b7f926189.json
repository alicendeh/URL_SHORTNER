{"ast":null,"code":"var _jsxFileName = \"/home/alice/Desktop/image-to-text/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef } from \"react\";\nimport preprocessImage from \"./preprocess\";\nimport Tesseract from \"tesseract.js\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [image, setImage] = useState(\"\");\n  const [text, setText] = useState(\"\"); // const [pin, setPin] = useState(\"\");\n\n  const canvasRef = useRef(null);\n  const imageRef = useRef(null);\n\n  const handleChange = event => {\n    setImage(URL.createObjectURL(event.target.files[0])); // setImage(`${window.location.origin}/${event.target.files[0].name}`);\n    // const image = preprocessImage(canvasObj, event.target.files[0]);\n  };\n\n  const handleClick = () => {\n    const canvas = canvasRef.current;\n    canvas.width = imageRef.current.width;\n    canvas.height = imageRef.current.height;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(imageRef.current, 0, 0);\n    ctx.putImageData(preprocessImage(canvas), 0, 0);\n    const dataUrl = canvas.toDataURL(\"image/jpeg\");\n    Tesseract.recognize(dataUrl, \"eng\", {\n      logger: m => console.log(m)\n    }).catch(err => {\n      console.error(err);\n    }).then(result => {\n      // Get Confidence score\n      let confidence = result.confidence; // Get full output\n\n      let text = result.text;\n      setText(text); // setPin(patterns);\n    });\n  };\n\n  let yup = getElementB;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Actual image uploaded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image,\n        className: \"App-logo\",\n        alt: \"logo\",\n        ref: imageRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Canvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: 700,\n        height: 300\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Extracted text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pin-box\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", text, \" alice \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick,\n        style: {\n          height: 50\n        },\n        children: \"Convert to text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"nT67L3321t9sXtWbqw8UoeUf/4U=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/alice/Desktop/image-to-text/src/App.js"],"names":["useState","useRef","preprocessImage","Tesseract","App","image","setImage","text","setText","canvasRef","imageRef","handleChange","event","URL","createObjectURL","target","files","handleClick","canvas","current","width","height","ctx","getContext","drawImage","putImageData","dataUrl","toDataURL","recognize","logger","m","console","log","catch","err","error","then","result","confidence","yup","getElementB"],"mappings":"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","sourcesContent":["import { useState, useRef } from \"react\";\nimport preprocessImage from \"./preprocess\";\nimport Tesseract from \"tesseract.js\";\nimport \"./App.css\";\n\nfunction App() {\n  const [image, setImage] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  // const [pin, setPin] = useState(\"\");\n  const canvasRef = useRef(null);\n  const imageRef = useRef(null);\n\n  const handleChange = (event) => {\n    setImage(URL.createObjectURL(event.target.files[0]));\n    // setImage(`${window.location.origin}/${event.target.files[0].name}`);\n    // const image = preprocessImage(canvasObj, event.target.files[0]);\n  };\n\n  const handleClick = () => {\n    const canvas = canvasRef.current;\n    canvas.width = imageRef.current.width;\n    canvas.height = imageRef.current.height;\n    const ctx = canvas.getContext(\"2d\");\n\n    ctx.drawImage(imageRef.current, 0, 0);\n    ctx.putImageData(preprocessImage(canvas), 0, 0);\n    const dataUrl = canvas.toDataURL(\"image/jpeg\");\n\n    Tesseract.recognize(dataUrl, \"eng\", {\n      logger: (m) => console.log(m),\n    })\n      .catch((err) => {\n        console.error(err);\n      })\n      .then((result) => {\n        // Get Confidence score\n        let confidence = result.confidence;\n        // Get full output\n        let text = result.text;\n\n        setText(text);\n        // setPin(patterns);\n      });\n  };\n  let yup = getElementB;\n\n  return (\n    <div className=\"App\">\n      <main className=\"App-main\">\n        <h3>Actual image uploaded</h3>\n        <img src={image} className=\"App-logo\" alt=\"logo\" ref={imageRef} />\n        <h3>Canvas</h3>\n        <canvas ref={canvasRef} width={700} height={300}></canvas>\n        <h3>Extracted text</h3>\n        <div className=\"pin-box\">\n          <p> {text} alice </p>\n        </div>\n        <input type=\"file\" onChange={handleChange} />\n        <button onClick={handleClick} style={{ height: 50 }}>\n          Convert to text\n        </button>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}