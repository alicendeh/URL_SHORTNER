{"ast":null,"code":"const adapter = require('../node/index.js');\n\nlet jobCounter = 0;\nmodule.exports = class TesseractJob {\n  constructor(instance) {\n    this.id = 'Job-' + ++jobCounter + '-' + Math.random().toString(16).slice(3, 8);\n    this._instance = instance;\n    this._resolve = [];\n    this._reject = [];\n    this._progress = [];\n    this._finally = [];\n  }\n\n  then(resolve, reject) {\n    if (this._resolve.push) {\n      this._resolve.push(resolve);\n    } else {\n      resolve(this._resolve);\n    }\n\n    if (reject) this.catch(reject);\n    return this;\n  }\n\n  catch(reject) {\n    if (this._reject.push) {\n      this._reject.push(reject);\n    } else {\n      reject(this._reject);\n    }\n\n    return this;\n  }\n\n  progress(fn) {\n    this._progress.push(fn);\n\n    return this;\n  }\n\n  finally(fn) {\n    this._finally.push(fn);\n\n    return this;\n  }\n\n  _send(action, payload) {\n    adapter.sendPacket(this._instance, {\n      jobId: this.id,\n      action: action,\n      payload: payload\n    });\n  }\n\n  _handle(packet) {\n    var data = packet.data;\n    let runFinallyCbs = false;\n\n    if (packet.status === 'resolve') {\n      if (this._resolve.length === 0) console.log(data);\n\n      this._resolve.forEach(fn => {\n        var ret = fn(data);\n\n        if (ret && typeof ret.then == 'function') {\n          console.warn('TesseractJob instances do not chain like ES6 Promises. To convert it into a real promise, use Promise.resolve.');\n        }\n      });\n\n      this._resolve = data;\n\n      this._instance._dequeue();\n\n      runFinallyCbs = true;\n    } else if (packet.status === 'reject') {\n      if (this._reject.length === 0) console.error(data);\n\n      this._reject.forEach(fn => fn(data));\n\n      this._reject = data;\n\n      this._instance._dequeue();\n\n      runFinallyCbs = true;\n    } else if (packet.status === 'progress') {\n      this._progress.forEach(fn => fn(data));\n    } else {\n      console.warn('Message type unknown', packet.status);\n    }\n\n    if (runFinallyCbs) {\n      this._finally.forEach(fn => fn(data));\n    }\n  }\n\n};","map":{"version":3,"sources":["/home/alice/Desktop/image-to-text/node_modules/tesseract.js/src/common/job.js"],"names":["adapter","require","jobCounter","module","exports","TesseractJob","constructor","instance","id","Math","random","toString","slice","_instance","_resolve","_reject","_progress","_finally","then","resolve","reject","push","catch","progress","fn","finally","_send","action","payload","sendPacket","jobId","_handle","packet","data","runFinallyCbs","status","length","console","log","forEach","ret","warn","_dequeue","error"],"mappings":"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","sourcesContent":["const adapter = require('../node/index.js')\n\nlet jobCounter = 0;\n\nmodule.exports = class TesseractJob {\n    constructor(instance){\n        this.id = 'Job-' + (++jobCounter) + '-' + Math.random().toString(16).slice(3, 8)\n\n        this._instance = instance;\n        this._resolve = []\n        this._reject = []\n        this._progress = []\n        this._finally = []\n    }\n\n    then(resolve, reject){\n        if(this._resolve.push){\n            this._resolve.push(resolve) \n        }else{\n            resolve(this._resolve)\n        }\n\n        if(reject) this.catch(reject);\n        return this;\n    }\n    catch(reject){\n        if(this._reject.push){\n            this._reject.push(reject) \n        }else{\n            reject(this._reject)\n        }\n        return this;\n    }\n    progress(fn){\n        this._progress.push(fn)\n        return this;\n    }\n    finally(fn) {\n        this._finally.push(fn)\n        return this;  \n    }\n    _send(action, payload){\n        adapter.sendPacket(this._instance, {\n            jobId: this.id,\n            action: action,\n            payload: payload\n        })\n    }\n\n    _handle(packet){\n        var data = packet.data;\n        let runFinallyCbs = false;\n\n        if(packet.status === 'resolve'){\n            if(this._resolve.length === 0) console.log(data);\n            this._resolve.forEach(fn => {\n                var ret = fn(data);\n                if(ret && typeof ret.then == 'function'){\n                    console.warn('TesseractJob instances do not chain like ES6 Promises. To convert it into a real promise, use Promise.resolve.')\n                }\n            })\n            this._resolve = data;\n            this._instance._dequeue()\n            runFinallyCbs = true;\n        }else if(packet.status === 'reject'){\n            if(this._reject.length === 0) console.error(data);\n            this._reject.forEach(fn => fn(data))\n            this._reject = data;\n            this._instance._dequeue()\n            runFinallyCbs = true;\n        }else if(packet.status === 'progress'){\n            this._progress.forEach(fn => fn(data))\n        }else{\n            console.warn('Message type unknown', packet.status)\n        }\n\n        if (runFinallyCbs) {\n            this._finally.forEach(fn => fn(data));\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"script"}