{"ast":null,"code":"function preprocessImage(canvas) {\n  const ctx = canvas.getContext('2d');\n  const image = ctx.getImageData(0, 0, canvas.width, canvas.height); // blurARGB(image.data, canvas, 1);\n  // dilate(image.data, canvas);\n\n  invertColors(image.data);\n  thresholdFilter(image.data, 0.5);\n  return image; // const ctx = canvas.getContext('2d')\n  // ctx.drawImage(image, 0, 0);\n  // const imgData = ctx.getImageData(0, 0, canvas.height, canvas.width);\n  // thresholdFilter(imgData.data, 0.7);\n  // ctx.putImageData(imgData,0,0)\n  // dataUrl = canvas.toDataURL('image/jpeg');\n  // return imgData;\n}\n\nfunction getARGB(data, i) {\n  const offset = i * 4;\n  return data[offset + 3] << 24 & 0xff000000 | data[offset] << 16 & 0x00ff0000 | data[offset + 1] << 8 & 0x0000ff00 | data[offset + 2] & 0x000000ff;\n}\n\n;\n\nfunction setPixels(pixels, data) {\n  let offset = 0;\n\n  for (let i = 0, al = pixels.length; i < al; i++) {\n    offset = i * 4;\n    pixels[offset + 0] = (data[i] & 0x00ff0000) >>> 16;\n    pixels[offset + 1] = (data[i] & 0x0000ff00) >>> 8;\n    pixels[offset + 2] = data[i] & 0x000000ff;\n    pixels[offset + 3] = (data[i] & 0xff000000) >>> 24;\n  }\n}\n\n; // internal kernel stuff for the gaussian blur filter\n\nlet blurRadius;\nlet blurKernelSize;\nlet blurKernel;\nlet blurMult; // from https://github.com/processing/p5.js/blob/main/src/image/filters.js\n\nfunction buildBlurKernel(r) {\n  let radius = r * 3.5 | 0;\n  radius = radius < 1 ? 1 : radius < 248 ? radius : 248;\n\n  if (blurRadius !== radius) {\n    blurRadius = radius;\n    blurKernelSize = 1 + blurRadius << 1;\n    blurKernel = new Int32Array(blurKernelSize);\n    blurMult = new Array(blurKernelSize);\n\n    for (let l = 0; l < blurKernelSize; l++) {\n      blurMult[l] = new Int32Array(256);\n    }\n\n    let bk, bki;\n    let bm, bmi;\n\n    for (let i = 1, radiusi = radius - 1; i < radius; i++) {\n      blurKernel[radius + i] = blurKernel[radiusi] = bki = radiusi * radiusi;\n      bm = blurMult[radius + i];\n      bmi = blurMult[radiusi--];\n\n      for (let j = 0; j < 256; j++) {\n        bm[j] = bmi[j] = bki * j;\n      }\n    }\n\n    bk = blurKernel[radius] = radius * radius;\n    bm = blurMult[radius];\n\n    for (let k = 0; k < 256; k++) {\n      bm[k] = bk * k;\n    }\n  }\n} // from https://github.com/processing/p5.js/blob/main/src/image/filters.js\n\n\nfunction blurARGB(pixels, canvas, radius) {\n  const width = canvas.width;\n  const height = canvas.height;\n  const numPackedPixels = width * height;\n  const argb = new Int32Array(numPackedPixels);\n\n  for (let j = 0; j < numPackedPixels; j++) {\n    argb[j] = getARGB(pixels, j);\n  }\n\n  let sum, cr, cg, cb, ca;\n  let read, ri, ym, ymi, bk0;\n  const a2 = new Int32Array(numPackedPixels);\n  const r2 = new Int32Array(numPackedPixels);\n  const g2 = new Int32Array(numPackedPixels);\n  const b2 = new Int32Array(numPackedPixels);\n  let yi = 0;\n  buildBlurKernel(radius);\n  let x, y, i;\n  let bm;\n\n  for (y = 0; y < height; y++) {\n    for (x = 0; x < width; x++) {\n      cb = cg = cr = ca = sum = 0;\n      read = x - blurRadius;\n\n      if (read < 0) {\n        bk0 = -read;\n        read = 0;\n      } else {\n        if (read >= width) {\n          break;\n        }\n\n        bk0 = 0;\n      }\n\n      for (i = bk0; i < blurKernelSize; i++) {\n        if (read >= width) {\n          break;\n        }\n\n        const c = argb[read + yi];\n        bm = blurMult[i];\n        ca += bm[(c & -16777216) >>> 24];\n        cr += bm[(c & 16711680) >> 16];\n        cg += bm[(c & 65280) >> 8];\n        cb += bm[c & 255];\n        sum += blurKernel[i];\n        read++;\n      }\n\n      ri = yi + x;\n      a2[ri] = ca / sum;\n      r2[ri] = cr / sum;\n      g2[ri] = cg / sum;\n      b2[ri] = cb / sum;\n    }\n\n    yi += width;\n  }\n\n  yi = 0;\n  ym = -blurRadius;\n  ymi = ym * width;\n\n  for (y = 0; y < height; y++) {\n    for (x = 0; x < width; x++) {\n      cb = cg = cr = ca = sum = 0;\n\n      if (ym < 0) {\n        bk0 = ri = -ym;\n        read = x;\n      } else {\n        if (ym >= height) {\n          break;\n        }\n\n        bk0 = 0;\n        ri = ym;\n        read = x + ymi;\n      }\n\n      for (i = bk0; i < blurKernelSize; i++) {\n        if (ri >= height) {\n          break;\n        }\n\n        bm = blurMult[i];\n        ca += bm[a2[read]];\n        cr += bm[r2[read]];\n        cg += bm[g2[read]];\n        cb += bm[b2[read]];\n        sum += blurKernel[i];\n        ri++;\n        read += width;\n      }\n\n      argb[x + yi] = ca / sum << 24 | cr / sum << 16 | cg / sum << 8 | cb / sum;\n    }\n\n    yi += width;\n    ymi += width;\n    ym++;\n  }\n\n  setPixels(pixels, argb);\n}\n\nfunction invertColors(pixels) {\n  for (var i = 0; i < pixels.length; i += 4) {\n    pixels[i] = pixels[i] ^ 255; // Invert Red\n\n    pixels[i + 1] = pixels[i + 1] ^ 255; // Invert Green\n\n    pixels[i + 2] = pixels[i + 2] ^ 255; // Invert Blue\n  }\n} // from https://github.com/processing/p5.js/blob/main/src/image/filters.js\n\n\nfunction dilate(pixels, canvas) {\n  let currIdx = 0;\n  const maxIdx = pixels.length ? pixels.length / 4 : 0;\n  const out = new Int32Array(maxIdx);\n  let currRowIdx, maxRowIdx, colOrig, colOut, currLum;\n  let idxRight, idxLeft, idxUp, idxDown;\n  let colRight, colLeft, colUp, colDown;\n  let lumRight, lumLeft, lumUp, lumDown;\n\n  while (currIdx < maxIdx) {\n    currRowIdx = currIdx;\n    maxRowIdx = currIdx + canvas.width;\n\n    while (currIdx < maxRowIdx) {\n      colOrig = colOut = getARGB(pixels, currIdx);\n      idxLeft = currIdx - 1;\n      idxRight = currIdx + 1;\n      idxUp = currIdx - canvas.width;\n      idxDown = currIdx + canvas.width;\n\n      if (idxLeft < currRowIdx) {\n        idxLeft = currIdx;\n      }\n\n      if (idxRight >= maxRowIdx) {\n        idxRight = currIdx;\n      }\n\n      if (idxUp < 0) {\n        idxUp = 0;\n      }\n\n      if (idxDown >= maxIdx) {\n        idxDown = currIdx;\n      }\n\n      colUp = getARGB(pixels, idxUp);\n      colLeft = getARGB(pixels, idxLeft);\n      colDown = getARGB(pixels, idxDown);\n      colRight = getARGB(pixels, idxRight); //compute luminance\n\n      currLum = 77 * (colOrig >> 16 & 0xff) + 151 * (colOrig >> 8 & 0xff) + 28 * (colOrig & 0xff);\n      lumLeft = 77 * (colLeft >> 16 & 0xff) + 151 * (colLeft >> 8 & 0xff) + 28 * (colLeft & 0xff);\n      lumRight = 77 * (colRight >> 16 & 0xff) + 151 * (colRight >> 8 & 0xff) + 28 * (colRight & 0xff);\n      lumUp = 77 * (colUp >> 16 & 0xff) + 151 * (colUp >> 8 & 0xff) + 28 * (colUp & 0xff);\n      lumDown = 77 * (colDown >> 16 & 0xff) + 151 * (colDown >> 8 & 0xff) + 28 * (colDown & 0xff);\n\n      if (lumLeft > currLum) {\n        colOut = colLeft;\n        currLum = lumLeft;\n      }\n\n      if (lumRight > currLum) {\n        colOut = colRight;\n        currLum = lumRight;\n      }\n\n      if (lumUp > currLum) {\n        colOut = colUp;\n        currLum = lumUp;\n      }\n\n      if (lumDown > currLum) {\n        colOut = colDown;\n        currLum = lumDown;\n      }\n\n      out[currIdx++] = colOut;\n    }\n  }\n\n  setPixels(pixels, out);\n}\n\n; // from https://github.com/processing/p5.js/blob/main/src/image/filters.js\n\nfunction thresholdFilter(pixels, level) {\n  if (level === undefined) {\n    level = 0.5;\n  }\n\n  const thresh = Math.floor(level * 255);\n\n  for (let i = 0; i < pixels.length; i += 4) {\n    const red = pixels[i];\n    const green = pixels[i + 1];\n    const blue = pixels[i + 2];\n    const gray = 0.2126 * red + 0.7152 * green + 0.0722 * blue;\n    let value;\n\n    if (gray >= thresh) {\n      value = 255;\n    } else {\n      value = 0;\n    }\n\n    pixels[i] = pixels[i + 1] = pixels[i + 2] = value;\n  }\n}\n\nexport default preprocessImage;","map":{"version":3,"sources":["/home/alice/Desktop/image-to-text/src/preprocess.js"],"names":["preprocessImage","canvas","ctx","getContext","image","getImageData","width","height","invertColors","data","thresholdFilter","getARGB","i","offset","setPixels","pixels","al","length","blurRadius","blurKernelSize","blurKernel","blurMult","buildBlurKernel","r","radius","Int32Array","Array","l","bk","bki","bm","bmi","radiusi","j","k","blurARGB","numPackedPixels","argb","sum","cr","cg","cb","ca","read","ri","ym","ymi","bk0","a2","r2","g2","b2","yi","x","y","c","dilate","currIdx","maxIdx","out","currRowIdx","maxRowIdx","colOrig","colOut","currLum","idxRight","idxLeft","idxUp","idxDown","colRight","colLeft","colUp","colDown","lumRight","lumLeft","lumUp","lumDown","level","undefined","thresh","Math","floor","red","green","blue","gray","value"],"mappings":"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","sourcesContent":["function preprocessImage(canvas) {\n    const ctx = canvas.getContext('2d');\n    const image = ctx.getImageData(0,0,canvas.width, canvas.height);\n    // blurARGB(image.data, canvas, 1);\n    // dilate(image.data, canvas);\n    invertColors(image.data);\n    thresholdFilter(image.data, 0.5);\n    return image;\n   \n    // const ctx = canvas.getContext('2d')\n  \n    // ctx.drawImage(image, 0, 0);\n    // const imgData = ctx.getImageData(0, 0, canvas.height, canvas.width);\n    // thresholdFilter(imgData.data, 0.7);\n    // ctx.putImageData(imgData,0,0)\n    // dataUrl = canvas.toDataURL('image/jpeg');\n    // return imgData;\n  }\n  \n  function getARGB (data, i) {\n    const offset = i * 4;\n    return (\n      ((data[offset + 3] << 24) & 0xff000000) |\n      ((data[offset] << 16) & 0x00ff0000) |\n      ((data[offset + 1] << 8) & 0x0000ff00) |\n      (data[offset + 2] & 0x000000ff)\n    );\n  };\n  \n  function setPixels (pixels, data) {\n    let offset = 0;\n    for (let i = 0, al = pixels.length; i < al; i++) {\n      offset = i * 4;\n      pixels[offset + 0] = (data[i] & 0x00ff0000) >>> 16;\n      pixels[offset + 1] = (data[i] & 0x0000ff00) >>> 8;\n      pixels[offset + 2] = data[i] & 0x000000ff;\n      pixels[offset + 3] = (data[i] & 0xff000000) >>> 24;\n    }\n  };\n  \n  // internal kernel stuff for the gaussian blur filter\n  let blurRadius;\n  let blurKernelSize;\n  let blurKernel;\n  let blurMult;\n  \n  // from https://github.com/processing/p5.js/blob/main/src/image/filters.js\n  function buildBlurKernel(r) {\n  let radius = (r * 3.5) | 0;\n  radius = radius < 1 ? 1 : radius < 248 ? radius : 248;\n  \n  if (blurRadius !== radius) {\n    blurRadius = radius;\n    blurKernelSize = (1 + blurRadius) << 1;\n    blurKernel = new Int32Array(blurKernelSize);\n    blurMult = new Array(blurKernelSize);\n    for (let l = 0; l < blurKernelSize; l++) {\n      blurMult[l] = new Int32Array(256);\n    }\n  \n    let bk, bki;\n    let bm, bmi;\n  \n    for (let i = 1, radiusi = radius - 1; i < radius; i++) {\n      blurKernel[radius + i] = blurKernel[radiusi] = bki = radiusi * radiusi;\n      bm = blurMult[radius + i];\n      bmi = blurMult[radiusi--];\n      for (let j = 0; j < 256; j++) {\n        bm[j] = bmi[j] = bki * j;\n      }\n    }\n    bk = blurKernel[radius] = radius * radius;\n    bm = blurMult[radius];\n  \n    for (let k = 0; k < 256; k++) {\n      bm[k] = bk * k;\n    }\n  }\n  }\n  \n  // from https://github.com/processing/p5.js/blob/main/src/image/filters.js\n  function blurARGB(pixels, canvas, radius) {\n  const width = canvas.width;\n  const height = canvas.height;\n  const numPackedPixels = width * height;\n  const argb = new Int32Array(numPackedPixels);\n  for (let j = 0; j < numPackedPixels; j++) {\n    argb[j] = getARGB(pixels, j);\n  }\n  let sum, cr, cg, cb, ca;\n  let read, ri, ym, ymi, bk0;\n  const a2 = new Int32Array(numPackedPixels);\n  const r2 = new Int32Array(numPackedPixels);\n  const g2 = new Int32Array(numPackedPixels);\n  const b2 = new Int32Array(numPackedPixels);\n  let yi = 0;\n  buildBlurKernel(radius);\n  let x, y, i;\n  let bm;\n  for (y = 0; y < height; y++) {\n    for (x = 0; x < width; x++) {\n      cb = cg = cr = ca = sum = 0;\n      read = x - blurRadius;\n      if (read < 0) {\n        bk0 = -read;\n        read = 0;\n      } else {\n        if (read >= width) {\n          break;\n        }\n        bk0 = 0;\n      }\n      for (i = bk0; i < blurKernelSize; i++) {\n        if (read >= width) {\n          break;\n        }\n        const c = argb[read + yi];\n        bm = blurMult[i];\n        ca += bm[(c & -16777216) >>> 24];\n        cr += bm[(c & 16711680) >> 16];\n        cg += bm[(c & 65280) >> 8];\n        cb += bm[c & 255];\n        sum += blurKernel[i];\n        read++;\n      }\n      ri = yi + x;\n      a2[ri] = ca / sum;\n      r2[ri] = cr / sum;\n      g2[ri] = cg / sum;\n      b2[ri] = cb / sum;\n    }\n    yi += width;\n  }\n  yi = 0;\n  ym = -blurRadius;\n  ymi = ym * width;\n  for (y = 0; y < height; y++) {\n    for (x = 0; x < width; x++) {\n      cb = cg = cr = ca = sum = 0;\n      if (ym < 0) {\n        bk0 = ri = -ym;\n        read = x;\n      } else {\n        if (ym >= height) {\n          break;\n        }\n        bk0 = 0;\n        ri = ym;\n        read = x + ymi;\n      }\n      for (i = bk0; i < blurKernelSize; i++) {\n        if (ri >= height) {\n          break;\n        }\n        bm = blurMult[i];\n        ca += bm[a2[read]];\n        cr += bm[r2[read]];\n        cg += bm[g2[read]];\n        cb += bm[b2[read]];\n        sum += blurKernel[i];\n        ri++;\n        read += width;\n      }\n      argb[x + yi] =\n        ((ca / sum) << 24) |\n        ((cr / sum) << 16) |\n        ((cg / sum) << 8) |\n        (cb / sum);\n    }\n    yi += width;\n    ymi += width;\n    ym++;\n  }\n  setPixels(pixels, argb);\n  }\n  \n  function invertColors(pixels) {\n    for (var i = 0; i < pixels.length; i+= 4) {\n      pixels[i] = pixels[i] ^ 255; // Invert Red\n      pixels[i+1] = pixels[i+1] ^ 255; // Invert Green\n      pixels[i+2] = pixels[i+2] ^ 255; // Invert Blue\n    }\n  }\n  // from https://github.com/processing/p5.js/blob/main/src/image/filters.js\n  function dilate(pixels, canvas) {\n   let currIdx = 0;\n   const maxIdx = pixels.length ? pixels.length / 4 : 0;\n   const out = new Int32Array(maxIdx);\n   let currRowIdx, maxRowIdx, colOrig, colOut, currLum;\n  \n   let idxRight, idxLeft, idxUp, idxDown;\n   let colRight, colLeft, colUp, colDown;\n   let lumRight, lumLeft, lumUp, lumDown;\n  \n   while (currIdx < maxIdx) {\n     currRowIdx = currIdx;\n     maxRowIdx = currIdx + canvas.width;\n     while (currIdx < maxRowIdx) {\n       colOrig = colOut = getARGB(pixels, currIdx);\n       idxLeft = currIdx - 1;\n       idxRight = currIdx + 1;\n       idxUp = currIdx - canvas.width;\n       idxDown = currIdx + canvas.width;\n  \n       if (idxLeft < currRowIdx) {\n         idxLeft = currIdx;\n       }\n       if (idxRight >= maxRowIdx) {\n         idxRight = currIdx;\n       }\n       if (idxUp < 0) {\n         idxUp = 0;\n       }\n       if (idxDown >= maxIdx) {\n         idxDown = currIdx;\n       }\n       colUp = getARGB(pixels, idxUp);\n       colLeft = getARGB(pixels, idxLeft);\n       colDown = getARGB(pixels, idxDown);\n       colRight = getARGB(pixels, idxRight);\n  \n       //compute luminance\n       currLum =\n         77 * ((colOrig >> 16) & 0xff) +\n         151 * ((colOrig >> 8) & 0xff) +\n         28 * (colOrig & 0xff);\n       lumLeft =\n         77 * ((colLeft >> 16) & 0xff) +\n         151 * ((colLeft >> 8) & 0xff) +\n         28 * (colLeft & 0xff);\n       lumRight =\n         77 * ((colRight >> 16) & 0xff) +\n         151 * ((colRight >> 8) & 0xff) +\n         28 * (colRight & 0xff);\n       lumUp =\n         77 * ((colUp >> 16) & 0xff) +\n         151 * ((colUp >> 8) & 0xff) +\n         28 * (colUp & 0xff);\n       lumDown =\n         77 * ((colDown >> 16) & 0xff) +\n         151 * ((colDown >> 8) & 0xff) +\n         28 * (colDown & 0xff);\n  \n       if (lumLeft > currLum) {\n         colOut = colLeft;\n         currLum = lumLeft;\n       }\n       if (lumRight > currLum) {\n         colOut = colRight;\n         currLum = lumRight;\n       }\n       if (lumUp > currLum) {\n         colOut = colUp;\n         currLum = lumUp;\n       }\n       if (lumDown > currLum) {\n         colOut = colDown;\n         currLum = lumDown;\n       }\n       out[currIdx++] = colOut;\n     }\n   }\n   setPixels(pixels, out);\n  };\n  \n  // from https://github.com/processing/p5.js/blob/main/src/image/filters.js\n  function thresholdFilter(pixels, level) {\n    if (level === undefined) {\n    level = 0.5;\n    }\n    const thresh = Math.floor(level * 255);\n    for (let i = 0; i < pixels.length; i += 4) {\n    const red = pixels[i];\n    const green = pixels[i + 1];\n    const blue = pixels[i + 2];\n    const gray = 0.2126 * red + 0.7152 * green + 0.0722 * blue;\n    let value;\n    if (gray >= thresh) {\n        value = 255;\n    } else {\n        value = 0;\n    }\n    pixels[i] = pixels[i + 1] = pixels[i + 2] = value;\n    }\n  }\n\nexport default preprocessImage"]},"metadata":{},"sourceType":"module"}