{"ast":null,"code":"var defaultOptions = {\n  // workerPath: 'https://cdn.jsdelivr.net/gh/naptha/tesseract.js@0.2.0/dist/worker.js',\n  corePath: 'https://cdn.jsdelivr.net/gh/naptha/tesseract.js-core@0.1.0/index.js',\n  langPath: 'https://tessdata.projectnaptha.com/3.02/'\n};\n\nif (process.env.TESS_ENV === \"development\") {\n  console.debug('Using Development Configuration');\n  defaultOptions.workerPath = location.protocol + '//' + location.host + '/dist/worker.dev.js?nocache=' + Math.random().toString(36).slice(3);\n} else {\n  var version = require('../../package.json').version;\n\n  defaultOptions.workerPath = 'https://cdn.jsdelivr.net/gh/naptha/tesseract.js@' + version + '/dist/worker.js';\n}\n\nexports.defaultOptions = defaultOptions;\n\nexports.spawnWorker = function spawnWorker(instance, workerOptions) {\n  if (Blob && URL) {\n    var blob = new Blob(['importScripts(\"' + workerOptions.workerPath + '\");'], {\n      type: 'application/javascript'\n    });\n    var worker = new Worker(URL.createObjectURL(blob));\n  } else {\n    var worker = new Worker(workerOptions.workerPath);\n  }\n\n  worker.onmessage = function (e) {\n    var packet = e.data;\n\n    instance._recv(packet);\n  };\n\n  return worker;\n};\n\nexports.terminateWorker = function (instance) {\n  instance.worker.terminate();\n};\n\nexports.sendPacket = function sendPacket(instance, packet) {\n  loadImage(packet.payload.image, function (img) {\n    packet.payload.image = img;\n    instance.worker.postMessage(packet);\n  });\n};\n\nfunction loadImage(image, cb) {\n  if (typeof image === 'string') {\n    if (/^\\#/.test(image)) {\n      // element css selector\n      return loadImage(document.querySelector(image), cb);\n    } else if (/(blob|data)\\:/.test(image)) {\n      // data url\n      var im = new Image();\n      im.src = image;\n\n      im.onload = e => loadImage(im, cb);\n\n      im.onerror = e => {\n        throw e;\n      };\n\n      return;\n    } else {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', image, true);\n      xhr.responseType = \"blob\";\n\n      xhr.onload = e => {\n        if (xhr.status >= 400) {\n          throw new Error('Fail to get image as Blob');\n        } else {\n          loadImage(xhr.response, cb);\n        }\n      };\n\n      xhr.onerror = e => {\n        throw e;\n      };\n\n      xhr.send(null);\n      return;\n    }\n  } else if (image instanceof File) {\n    // files\n    var fr = new FileReader();\n\n    fr.onload = e => loadImage(fr.result, cb);\n\n    fr.onerror = e => {\n      throw e;\n    };\n\n    fr.readAsDataURL(image);\n    return;\n  } else if (image instanceof Blob) {\n    return loadImage(URL.createObjectURL(image), cb);\n  } else if (image.getContext) {\n    // canvas element\n    return loadImage(image.getContext('2d'), cb);\n  } else if (image.tagName == \"IMG\" || image.tagName == \"VIDEO\") {\n    // image element or video element\n    var c = document.createElement('canvas');\n    c.width = image.naturalWidth || image.videoWidth;\n    c.height = image.naturalHeight || image.videoHeight;\n    var ctx = c.getContext('2d');\n    ctx.drawImage(image, 0, 0);\n    return loadImage(ctx, cb);\n  } else if (image.getImageData) {\n    // canvas context\n    var data = image.getImageData(0, 0, image.canvas.width, image.canvas.height);\n    return loadImage(data, cb);\n  } else {\n    return cb(image);\n  }\n\n  throw new Error('Missing return in loadImage cascade');\n}","map":{"version":3,"sources":["/home/alice/Desktop/image-to-text/node_modules/tesseract.js/src/browser/index.js"],"names":["defaultOptions","corePath","langPath","process","env","TESS_ENV","console","debug","workerPath","location","protocol","host","Math","random","toString","slice","version","require","exports","spawnWorker","instance","workerOptions","Blob","URL","blob","type","worker","Worker","createObjectURL","onmessage","e","packet","data","_recv","terminateWorker","terminate","sendPacket","loadImage","payload","image","img","postMessage","cb","test","document","querySelector","im","Image","src","onload","onerror","xhr","XMLHttpRequest","open","responseType","status","Error","response","send","File","fr","FileReader","result","readAsDataURL","getContext","tagName","c","createElement","width","naturalWidth","videoWidth","height","naturalHeight","videoHeight","ctx","drawImage","getImageData","canvas"],"mappings":"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","sourcesContent":["var defaultOptions = {\n    // workerPath: 'https://cdn.jsdelivr.net/gh/naptha/tesseract.js@0.2.0/dist/worker.js',\n    corePath: 'https://cdn.jsdelivr.net/gh/naptha/tesseract.js-core@0.1.0/index.js',    \n    langPath: 'https://tessdata.projectnaptha.com/3.02/',\n}\n\nif (process.env.TESS_ENV === \"development\") {\n    console.debug('Using Development Configuration')\n    defaultOptions.workerPath = location.protocol + '//' + location.host + '/dist/worker.dev.js?nocache=' + Math.random().toString(36).slice(3)\n}else{\n    var version = require('../../package.json').version;\n    defaultOptions.workerPath = 'https://cdn.jsdelivr.net/gh/naptha/tesseract.js@' + version + '/dist/worker.js'\n}\n\nexports.defaultOptions = defaultOptions;\n\n\nexports.spawnWorker = function spawnWorker(instance, workerOptions){\n    if(Blob && URL){\n        var blob = new Blob(['importScripts(\"' + workerOptions.workerPath + '\");'], {\n            type: 'application/javascript'\n        });\n        var worker = new Worker(URL.createObjectURL(blob));\n    }else{\n        var worker = new Worker(workerOptions.workerPath)\n    }\n\n    worker.onmessage = function(e){\n        var packet = e.data;\n        instance._recv(packet)\n    }\n    return worker\n}\n\nexports.terminateWorker = function(instance){\n    instance.worker.terminate()\n}\n\nexports.sendPacket = function sendPacket(instance, packet){\n    loadImage(packet.payload.image, function(img){\n        packet.payload.image = img\n        instance.worker.postMessage(packet) \n    })\n}\n\n\nfunction loadImage(image, cb){\n    if(typeof image === 'string'){\n        if(/^\\#/.test(image)){\n            // element css selector\n            return loadImage(document.querySelector(image), cb)\n        }else if(/(blob|data)\\:/.test(image)){\n            // data url\n            var im = new Image\n            im.src = image;\n            im.onload = e => loadImage(im, cb);\n            im.onerror = e => { throw e; };\n            return\n        }else{\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', image, true)\n            xhr.responseType = \"blob\";\n            \n            xhr.onload = e => {\n                if (xhr.status >= 400){\n                  throw new Error('Fail to get image as Blob');\n                }else{\n                    loadImage(xhr.response, cb);\n                }\n            };\n            xhr.onerror = e => { throw e; }; \n            \n            xhr.send(null)\n            return\n        }\n    }else if(image instanceof File){\n        // files\n        var fr = new FileReader()\n        fr.onload = e => loadImage(fr.result, cb);\n        fr.onerror = e => { throw e; }; \n        fr.readAsDataURL(image)\n        return\n    }else if(image instanceof Blob){\n        return loadImage(URL.createObjectURL(image), cb)\n    }else if(image.getContext){\n        // canvas element\n        return loadImage(image.getContext('2d'), cb)\n    }else if(image.tagName == \"IMG\" || image.tagName == \"VIDEO\"){\n        // image element or video element\n        var c = document.createElement('canvas');\n        c.width  = image.naturalWidth  || image.videoWidth;\n        c.height = image.naturalHeight || image.videoHeight;\n        var ctx = c.getContext('2d');\n        ctx.drawImage(image, 0, 0);\n        return loadImage(ctx, cb)\n    }else if(image.getImageData){\n        // canvas context\n        var data = image.getImageData(0, 0, image.canvas.width, image.canvas.height);\n        return loadImage(data, cb)\n    }else{\n        return cb(image)\n    }\n    throw new Error('Missing return in loadImage cascade')\n\n}\n"]},"metadata":{},"sourceType":"script"}