{"ast":null,"code":"const adapter = require('./node/index.js');\n\nconst circularize = require('./common/circularize.js');\n\nconst TesseractJob = require('./common/job');\n\nconst version = require('../package.json').version;\n\nconst create = function (workerOptions = {}) {\n  var worker = new TesseractWorker(Object.assign({}, adapter.defaultOptions, workerOptions));\n  worker.create = create;\n  worker.version = version;\n  return worker;\n};\n\nclass TesseractWorker {\n  constructor(workerOptions) {\n    this.worker = null;\n    this.workerOptions = workerOptions;\n    this._currentJob = null;\n    this._queue = [];\n  }\n\n  recognize(image, options = {}) {\n    return this._delay(job => {\n      if (typeof options === 'string') options = {\n        lang: options\n      };\n      options.lang = options.lang || 'eng';\n\n      job._send('recognize', {\n        image,\n        options,\n        workerOptions: this.workerOptions\n      });\n    });\n  }\n\n  detect(image, options = {}) {\n    return this._delay(job => {\n      job._send('detect', {\n        image,\n        options,\n        workerOptions: this.workerOptions\n      });\n    });\n  }\n\n  terminate() {\n    if (this.worker) adapter.terminateWorker(this);\n    this.worker = null;\n    this._currentJob = null;\n    this._queue = [];\n  }\n\n  _delay(fn) {\n    if (!this.worker) this.worker = adapter.spawnWorker(this, this.workerOptions);\n    var job = new TesseractJob(this);\n\n    this._queue.push(e => {\n      this._queue.shift();\n\n      this._currentJob = job;\n      fn(job);\n    });\n\n    if (!this._currentJob) this._dequeue();\n    return job;\n  }\n\n  _dequeue() {\n    this._currentJob = null;\n\n    if (this._queue.length) {\n      this._queue[0]();\n    }\n  }\n\n  _recv(packet) {\n    if (packet.status === 'resolve' && packet.action === 'recognize') {\n      packet.data = circularize(packet.data);\n    }\n\n    if (this._currentJob.id === packet.jobId) {\n      this._currentJob._handle(packet);\n    } else {\n      console.warn('Job ID ' + packet.jobId + ' not known.');\n    }\n  }\n\n}\n\nmodule.exports = create();","map":{"version":3,"sources":["/home/alice/Desktop/image-to-text/node_modules/tesseract.js/src/index.js"],"names":["adapter","require","circularize","TesseractJob","version","create","workerOptions","worker","TesseractWorker","Object","assign","defaultOptions","constructor","_currentJob","_queue","recognize","image","options","_delay","job","lang","_send","detect","terminate","terminateWorker","fn","spawnWorker","push","e","shift","_dequeue","length","_recv","packet","status","action","data","id","jobId","_handle","console","warn","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,yBAAD,CAA3B;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,cAAD,CAA5B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,iBAAD,CAAP,CAA2BG,OAA3C;;AAEA,MAAMC,MAAM,GAAG,UAASC,aAAa,GAAG,EAAzB,EAA4B;AAC1C,MAAIC,MAAM,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,OAAO,CAACW,cAA1B,EAA0CL,aAA1C,CAApB,CAAb;AACAC,EAAAA,MAAM,CAACF,MAAP,GAAgBA,MAAhB;AACAE,EAAAA,MAAM,CAACH,OAAP,GAAiBA,OAAjB;AACA,SAAOG,MAAP;AACA,CALD;;AAOA,MAAMC,eAAN,CAAsB;AACrBI,EAAAA,WAAW,CAACN,aAAD,EAAe;AACzB,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKD,aAAL,GAAqBA,aAArB;AACA,SAAKO,WAAL,GAAmB,IAAnB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA;;AAEDC,EAAAA,SAAS,CAACC,KAAD,EAAQC,OAAO,GAAG,EAAlB,EAAqB;AAC7B,WAAO,KAAKC,MAAL,CAAYC,GAAG,IAAI;AACzB,UAAI,OAAOF,OAAP,KAAmB,QAAvB,EAAiCA,OAAO,GAAG;AAACG,QAAAA,IAAI,EAAEH;AAAP,OAAV;AACjCA,MAAAA,OAAO,CAACG,IAAR,GAAeH,OAAO,CAACG,IAAR,IAAgB,KAA/B;;AAEAD,MAAAA,GAAG,CAACE,KAAJ,CAAU,WAAV,EAAuB;AAAEL,QAAAA,KAAF;AAASC,QAAAA,OAAT;AAAkBX,QAAAA,aAAa,EAAE,KAAKA;AAAtC,OAAvB;AACA,KALM,CAAP;AAMA;;AACDgB,EAAAA,MAAM,CAACN,KAAD,EAAQC,OAAO,GAAG,EAAlB,EAAqB;AAC1B,WAAO,KAAKC,MAAL,CAAYC,GAAG,IAAI;AACzBA,MAAAA,GAAG,CAACE,KAAJ,CAAU,QAAV,EAAoB;AAAEL,QAAAA,KAAF;AAASC,QAAAA,OAAT;AAAkBX,QAAAA,aAAa,EAAE,KAAKA;AAAtC,OAApB;AACA,KAFM,CAAP;AAGA;;AAEDiB,EAAAA,SAAS,GAAE;AACV,QAAG,KAAKhB,MAAR,EAAgBP,OAAO,CAACwB,eAAR,CAAwB,IAAxB;AAChB,SAAKjB,MAAL,GAAc,IAAd;AACA,SAAKM,WAAL,GAAmB,IAAnB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA;;AAEDI,EAAAA,MAAM,CAACO,EAAD,EAAI;AACT,QAAG,CAAC,KAAKlB,MAAT,EAAiB,KAAKA,MAAL,GAAcP,OAAO,CAAC0B,WAAR,CAAoB,IAApB,EAA0B,KAAKpB,aAA/B,CAAd;AAEjB,QAAIa,GAAG,GAAG,IAAIhB,YAAJ,CAAiB,IAAjB,CAAV;;AACA,SAAKW,MAAL,CAAYa,IAAZ,CAAiBC,CAAC,IAAI;AACrB,WAAKd,MAAL,CAAYe,KAAZ;;AACA,WAAKhB,WAAL,GAAmBM,GAAnB;AACAM,MAAAA,EAAE,CAACN,GAAD,CAAF;AACA,KAJD;;AAKA,QAAG,CAAC,KAAKN,WAAT,EAAsB,KAAKiB,QAAL;AACtB,WAAOX,GAAP;AACA;;AAEDW,EAAAA,QAAQ,GAAE;AACT,SAAKjB,WAAL,GAAmB,IAAnB;;AACA,QAAG,KAAKC,MAAL,CAAYiB,MAAf,EAAsB;AACrB,WAAKjB,MAAL,CAAY,CAAZ;AACA;AACD;;AAEDkB,EAAAA,KAAK,CAACC,MAAD,EAAQ;AACN,QAAGA,MAAM,CAACC,MAAP,KAAkB,SAAlB,IAA+BD,MAAM,CAACE,MAAP,KAAkB,WAApD,EAAgE;AAC5DF,MAAAA,MAAM,CAACG,IAAP,GAAclC,WAAW,CAAC+B,MAAM,CAACG,IAAR,CAAzB;AACH;;AAEP,QAAG,KAAKvB,WAAL,CAAiBwB,EAAjB,KAAwBJ,MAAM,CAACK,KAAlC,EAAwC;AACvC,WAAKzB,WAAL,CAAiB0B,OAAjB,CAAyBN,MAAzB;AACA,KAFD,MAEO;AACNO,MAAAA,OAAO,CAACC,IAAR,CAAa,YAAYR,MAAM,CAACK,KAAnB,GAA2B,aAAxC;AACA;AACD;;AA3DoB;;AA8DtBI,MAAM,CAACC,OAAP,GAAiBtC,MAAM,EAAvB","sourcesContent":["const adapter = require('./node/index.js')\nconst circularize = require('./common/circularize.js')\nconst TesseractJob = require('./common/job');\nconst version = require('../package.json').version;\n\nconst create = function(workerOptions = {}){\n\tvar worker = new TesseractWorker(Object.assign({}, adapter.defaultOptions, workerOptions));\n\tworker.create = create;\n\tworker.version = version;\n\treturn worker;\n}\n\nclass TesseractWorker {\n\tconstructor(workerOptions){\n\t\tthis.worker = null;\n\t\tthis.workerOptions = workerOptions;\n\t\tthis._currentJob = null;\n\t\tthis._queue = [];\n\t}\n\n\trecognize(image, options = {}){\n\t\treturn this._delay(job => {\n\t\t\tif (typeof options === 'string') options = {lang: options}\n\t\t\toptions.lang = options.lang || 'eng';\n\n\t\t\tjob._send('recognize', { image, options, workerOptions: this.workerOptions });\n\t\t})\n\t}\n\tdetect(image, options = {}){\n\t\treturn this._delay(job => {\n\t\t\tjob._send('detect', { image, options, workerOptions: this.workerOptions });\n\t\t})\n\t}\n\n\tterminate(){\n\t\tif(this.worker) adapter.terminateWorker(this);\n\t\tthis.worker = null;\n\t\tthis._currentJob = null;\n\t\tthis._queue = [];\n\t}\n\n\t_delay(fn){\n\t\tif(!this.worker) this.worker = adapter.spawnWorker(this, this.workerOptions);\n\n\t\tvar job = new TesseractJob(this);\n\t\tthis._queue.push(e => {\n\t\t\tthis._queue.shift();\n\t\t\tthis._currentJob = job;\n\t\t\tfn(job);\n\t\t});\n\t\tif(!this._currentJob) this._dequeue();\n\t\treturn job;\n\t}\n\n\t_dequeue(){\n\t\tthis._currentJob = null;\n\t\tif(this._queue.length){\n\t\t\tthis._queue[0]();\n\t\t}\n\t}\n\n\t_recv(packet){\n        if(packet.status === 'resolve' && packet.action === 'recognize'){\n            packet.data = circularize(packet.data);\n        }\n\n\t\tif(this._currentJob.id === packet.jobId){\n\t\t\tthis._currentJob._handle(packet)\n\t\t} else {\n\t\t\tconsole.warn('Job ID ' + packet.jobId + ' not known.')\n\t\t}\n\t}\n}\n\nmodule.exports = create();\n"]},"metadata":{},"sourceType":"script"}